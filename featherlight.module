<?php
/**
 * @file
 * A very lightweight jQuery lightbox plugin.
 */

/**
 * Implements hook_library_info().
 */
function featherlight_library_info() {
  $libraries['featherlight'] = array(
    'title' => 'Featherlight',
    'website' => 'https://noelboss.github.io/featherlight/',
    'version' => '1.7.6',
    'js' => array(
      backdrop_get_path('module', 'featherlight') . '/library/featherlight.min.js' => array(),
    ),
    'css' => array(
      backdrop_get_path('module', 'featherlight') . '/library/featherlight.min.css' => array(),
    ),
  );
  $libraries['featherlight-gallery'] = array(
    'title' => 'Featherlight Gallery',
    'website' => 'https://noelboss.github.io/featherlight/gallery.html',
    'version' => '1.7.6',
    'js' => array(
      backdrop_get_path('module', 'featherlight') . '/library/featherlight.gallery.min.js' => array(),
    ),
    'css' => array(
      backdrop_get_path('module', 'featherlight') . '/library/featherlight.gallery.min.css' => array(),
    ),
    'dependencies' => array(
      array('featherlight', 'featherlight'),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_field_formatter_info().
 */
function featherlight_field_formatter_info() {
  return array(
    'featherlight' => array(
      'label' => t('Featherlight'),
      'field types' => array('image'),
      'settings' => array(
        'featherlight_image_style_content' => '',
        'featherlight_image_style_lightbox' => '',
        'featherlight_caption_attribute' => '',
        'featherlight_gallery' => FALSE,
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function featherlight_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $settings = $instance['display'][$view_mode]['settings'];
  $image_styles = image_style_options(FALSE, PASS_THROUGH);

  $element['featherlight_image_style_content'] = array(
    '#type' => 'select',
    '#title' => t('Content image style'),
    '#description' => t('The image style to use for the <em>content</em> image.'),
    '#options' => $image_styles,
    '#empty_option' => t('None (original image)'),
    '#default_value' => $settings['featherlight_image_style_content'],
  );
  $element['featherlight_image_style_lightbox'] = array(
    '#type' => 'select',
    '#title' => t('Lightbox image style'),
    '#description' => t('The image style to use for the <em>lightbox</em> image.'),
    '#options' => $image_styles,
    '#empty_option' => t('None (original image)'),
    '#default_value' => $settings['featherlight_image_style_lightbox'],
  );
  $element['featherlight_caption_attribute'] = array(
    '#type' => 'select',
    '#title' => t('Caption'),
    '#description' => t('The image attribute to use for the lightbox caption.'),
    '#options' => array(
      'alt' => t('Alt'),
      'title' => t('Title'),
    ),
    '#empty_option' => t('None'),
    '#default_value' => $settings['featherlight_caption_attribute'],
  );
  if ($field['cardinality'] != 1) {
    $element['featherlight_gallery'] = array(
      '#type' => 'checkbox',
      '#title' => t('Gallery'),
      '#description' => t('Display images in a gallery.'),
      '#default_value' => $settings['featherlight_gallery'],
    );
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function featherlight_field_formatter_settings_summary($field, $instance, $view_mode) {
  $summary = array();
  $settings = $instance['display'][$view_mode]['settings'];
  $image_styles = image_style_options(FALSE, PASS_THROUGH);

  // Content image style.
  if (!empty($settings['featherlight_image_style_content'])) {
    $summary[] = t('Content image style: @content', array('@content' => $image_styles[$settings['featherlight_image_style_content']]));
  }
  else {
    $summary[] = t('Content image style: None (original image)');
  }

  // Lightbox image style.
  if (!empty($settings['featherlight_image_style_lightbox'])) {
    $summary[] = t('Lightbox image style: @lightbox', array('@lightbox' => $image_styles[$settings['featherlight_image_style_lightbox']]));
  }
  else {
    $summary[] = t('Lightbox image style: None (original image)');
  }

  // Caption.
  if (!empty($settings['featherlight_caption_attribute'])) {
    $summary[] = t('Caption: @caption', array('@caption' => backdrop_ucfirst($settings['featherlight_caption_attribute'])));
  }
  else {
    $summary[] = t('Caption: None');
  }

  // Gallery.
  if ($field['cardinality'] != 1) {
    $summary[] = t('Gallery: @gallery', array('@gallery' => $settings['featherlight_gallery'] == TRUE ? 'Yes' : 'No'));
  }

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function featherlight_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  // Output each image as a Featherlight lightbox.
  foreach ($items as $delta => $item) {
    $element[$delta] = array(
      '#theme' => 'featherlight',
      '#item' => $item,
      '#content_image_style' => $settings['featherlight_image_style_content'],
      '#lightbox_image_style' => $settings['featherlight_image_style_lightbox'],
      '#caption_attribute' => $settings['featherlight_caption_attribute'],
      '#gallery' => $settings['featherlight_gallery'],
    );
  }

  return $element;
}

/**
 * Implements hook_preprocess_field().
 */
function featherlight_preprocess_field(&$variables) {
  // Add data-featherlight* attributes to images.
  if ($variables['element']['#formatter'] == 'featherlight') {
    $variables['content_attributes']['data-featherlight-filter'] = 'a.featherlight-lightbox';

    // Gallery.
    if ($variables['items'][0]['#gallery'] == TRUE) {
      $variables['content_attributes']['data-featherlight-gallery'] = '';
    }
    // Image.
    else {
      $variables['content_attributes']['data-featherlight'] = '';
    }
  }
}

/**
 * Implements hook_theme().
 */
function featherlight_theme($existing, $type, $theme, $path) {
  return array(
    'featherlight' => array(
      'variables' => array(
        'item' => array(),
        'content_image_style' => '',
        'lightbox_image_style' => '',
        'caption_attribute' => '',
        'gallery' => FALSE,
      ),
    ),
  );
}

/**
 * Returns HTML for a Featherlight lightbox.
 *
 * @param array $variables
 *   An associative array containing:
 *   - item: An array of image data.
 *   - content_image_style: The image style to use for the content image.
 *   - lightbox_image_style: The image style to use for the lightbox image.
 *   - caption_attribute: The image attribute to use for the lightbox caption.
 *   - gallery: Whether or not multiple images should be displayed in a gallery.
 *
 * @ingroup themeable
 */
function theme_featherlight($variables = array()) {
  $item = $variables['item'];

  // Add Featherlight library files.
  backdrop_add_library('featherlight', 'featherlight', TRUE);
  if ($variables['gallery'] == TRUE) {
    backdrop_add_library('featherlight', 'featherlight-gallery', TRUE);
  }
  backdrop_add_js(backdrop_get_path('module', 'featherlight') . '/js/featherlight.caption.js');

  // Add Featherlight settings.
  $settings = array('captionEnabled' => FALSE);
  if (!empty($variables['caption_attribute'])) {
    $settings['captionEnabled'] = TRUE;
    $settings['captionAttr'] = $variables['caption_attribute'];
  }
  backdrop_add_js(array('featherlight' => array(
    'id-' . $item['fid'] => $settings,
  )), 'setting');

  // Generate content image.
  $image_variables = array(
    'uri' => $item['uri'],
    'width' => $item['width'],
    'height' => $item['height'],
    'alt' => $item['alt'],
    'title' => $item['title'],
    'attributes' => array(
      'data-file-id' => $item['fid'],
    ),
  );
  if (!empty($variables['content_image_style'])) {
    $image_variables['style_name'] = $variables['content_image_style'];
    $image = theme('image_style', $image_variables);
  }
  else {
    $image = theme('image', $image_variables);
  }

  // Generate lightbox image URL.
  if (!empty($variables['lightbox_image_style'])) {
    $url = image_style_url($variables['lightbox_image_style'], $item['uri']);
  }
  else {
    $url = file_create_url($item['uri']);
  }

  // Generate link options.
  $options = array(
    'attributes' => array(
      'class' => array('featherlight-lightbox'),
    ),
    'html' => TRUE,
  );

  return l($image, $url, $options);
}

